// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWXU8cNxT9Kyu3Dy0adjZApWiqPER5CVKlRuojQsjMmp0JM/ZgeygrNNLakxBQaJum",
	"NG0ipRIogi3b7DZCjdIG9c9cbXd5yl+o7IHd8BFIK1W89AW8nnuPfY/PufYy8lmcMEqoFMhbRpyIhFFB",
	"7I+xSsX88xmVhEozxEkShT6WIaPubcGomRN+QGJsRh9yMoc89IE7xHSLr8I9AkZZljmILOE4ici7kg4/",
	"C1ekvk+EQCZnvDL2H+2mSoTPw8TgIA9dT2VQKYFq93e/6jf3exuvD55ugXoF+S7kDdDPIP8FdAfyVfT+",
	"haSULCXEl6Q6QzhnHGUOCgiuEm6Z/oLI0RuMzYcW6fh+wuqMZPOElkA1S9jyUUxAQ5dGRrpf73U7K6Ba",
	"oDqlAqMEqgPqO1Dt0vVbk6aU7rf7oPa69/4A9QOonX7zebf9BNT3oNdB3wetQbVB7di8XVDfQEMdq14/",
	"7P223tt40f1z3aC6Po6iWezPlwwvqm2o0R3QTdC/Q77612MNqnVykYYeGUHOWwc04G5Q4jVSL5fL5U/f",
	"rvIanvWrdvamlMnnNKojB8l6YvKE5CGtmUPMHDRx2WpFxS4mLtkzCa6RGcrkzBxL6UBumYM+uXQ7h1QS",
	"TnE0IwhfJHywt+xIFsd6kBknnCWEy7BoSD6r2tk5xmMsjXCoHB8b6sHg14g1V0yEwDUbfVIsDuJkIQ05",
	"qSJvqsAcxk8PwNjsbeLLYnchnWOnnXmDJTgiUhJQ7eu3Jq2BHkND207xFPQryFfNWHWmrB03Qa9NfxRI",
	"mQjPdWuhDNLZss9i1z8CGo5GcRJ+bCoLpbXIsQ/IQYuEi2IXV8oVUzBLCDWfPDReNlMOSrAMLG0uTmXg",
	"RqwW2hNOmJCni4H8OehfbXvb697b7j1YAf2wv7kOagVZdG51MllFHvrMQjln3hZnCWAQ55qgYS8/P9YE",
	"DX19fuxEgXvovotiJ9DQDufHmiArT+KnPJR15E1NO0ikcYx5/QRr5rRwTRhRGcLRtEl0A4IjGZiVasTS",
	"fpzKGwHx52/amPr/jFpGf4S8ZS8SBXoH8hx057BH2K5hCF5GKY+Qh4yXPNeNmI+jgAnpXa1crbiLV1A2",
	"PTiMk0IvLjbIX4PeAt0CvQ35nnGqah082jIONjdi006uWR8/KwKQgyiOjRnt8WbOaQttQ74P+qX5+/5o",
	"qbAt6ySaz+I4paGsl/4B1iDpAsB2r73Ze7DSb9z9N+CjuBqH9MwlDruUWeJA3e8+etlv3O1tNM0j4SLw",
	"QYN7BzioO6CemNeEaoHW3Rc/mceFea/cORP7zf7qmWKyKT+/2V8bLh6HwreaWRoVkiVRWAusV0Nj0TgY",
	"Y4sLi1fJl+HCOMqyvwMAAP//zbz7SDQLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
