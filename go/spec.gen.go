// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWXW8TRxf+K6t536vI8S6JkdBWXFBuQKpUpKpXOLIm64m9ZL2zzM5GsSJLmVkEAdKW",
	"Av2AilaNUBLiEhdFVFAs/syRSbjiL1Rn1rEdszGNlMvmIrZnn/PxnPPMObtCPN6IeMhCGRN3hbBl2ogC",
	"Zr7P02pFsOsJiyX+jJNGg4omccnntGodPiiQJRokjLhkpRxaVpl4vMrKxLVKjlPIThosjmnNHJZHbcuk",
	"HLZIq0D8UDIR0qASM7HERIUJwcXRkJf7ECuDWBnk2OBn84PnehmkEdEaq4RcVhZ4ElbzsrhCa8wKubQM",
	"YhL3Ul74o+aDuHHieSyOx0IJjod+WLP4EhMBpxPizeTTHURIQrYcMU+yXFZfD55+qqyzzkxenHEH/bit",
	"AhEsjngYZ3qacRz88HgoWWgkRaMo8D0qfR7a12IejitwpDL/F2yBuOR/9lCv9iHUPsRhyNirswY9ziR7",
	"GtuHiZEW2lRZ7Ak/wjyIS96t3evd+e3dIw3pH6BfQ/oE0j3Qr7GSs87MCTnk1X4imY8MTofVhUTWHQvU",
	"7sHONwfb3f2Hb94/2QD1CtIdSFdBPzVsO5CukQKpM1plwuT/FZPTFzlf9Bn+OurTr1YkX2ShBWrboqYH",
	"2QGsamtqqvftXq9zE1QbVMfKfFigOqAegNq1Lly5jOn0vu+C2uvd+hvUT6C2Draf93Yfg/oB9Drou6A1",
	"qF1QW8ZuB9R3sKqOMND391+u7z980Xu7jl5tjwbBPPUWLeSmdpGe7oDeNp1cw66q9niQVT01RUaL3G/G",
	"CMXzrFksFoufjbI8T+e9qjm9JGX0ZRg0SYHIZoR2sRR+WMNGtAqkdGLlj83eiYIZxZ6OVsaKhl/SZ5B2",
	"ieFSOiGX4+bqRFK5RqfF7jGkXdCvQK0fbN4F9RTUXdB3QL0F9QvoB0jz7IlbduwWm8gz3+qUiOqXSDS9",
	"Z+gOejjwbdIeOMBOCR4xIf2MEE59/FzgokEl3oVQzs4MJY6p15jAavXXAaLH9Y9L4HriC1Yl7tXM5xA/",
	"N3DG568xT2Ys/HCBG1e+NHeQRyycppE/HUfMw+3ERJwxPFN0MDwCaOQTl8wWnaJDcJfLuiFh00TW7YDX",
	"fNOwiGcXalwRz0H/aWbgXu/W5v69m6DvH/y+DuomMd6FafvlKnHJF8ZV/mrLa9QAZyNouEImYxE0HByT",
	"saXMb/9ifgpbGlH3ZCyCjFiYlwhfNol7da4w8t4wWjVUBa3F2GIsOJlDQ7vOaCDrGKnGTNmPlvJinXmL",
	"lwym+V9FTUV/hrRthq4CvQVpCrqT3YlsPGCBV0giAuKSupSRa9sB92hQ57F0zznnHHvpDGnNDZoxLvRs",
	"c0L6BvQG6DboTXy1SddAtd//uAHqkVm52+bwNr74mOZm7wQhbeBlNO1tFT66QuoGqMe4T1UbtO69+BXX",
	"K27sG7kOP3TXctkak2cfureHERt+7OVFTDfNXPsL///7/JMYR9ZcgSxPx5JHgV+rG2n6qMjl/h9ptf4J",
	"AAD//xWLyCsaDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
