// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWXWsbRxf+K8u875WRtRtbgbAlF2luYig0UHoVGTFejaWNVzub2ZGxMALPbHCc2G3d",
	"JP2IS1pqgu1YjdVgAkkj8mcOip2r/IVyZmVJVtYKBl9WN9qdfc7Hc84zc2aZeLwW8ZCFMibuMmFLtBYF",
	"zDzP0XJJsDt1Fkt8jeu1GhUN4pIvadk6+ZAjizSoM+KS5WJoWUXi8TIrEtcqOE4uXamxOKYVs1gcti2S",
	"YtgkzRzxQ8lESINSzMQiEyUmBBenQ870IFYKsVLImcEvZwfP9NJPI6IVVgq5LM3zeljOyuImrTAr5NIy",
	"iHHcC1nhT5v348Z1z2NxPBJKcFz0w4rFF5kIOB0Tbyqbbj9CPWRLEfMky2T1bf/r58o67UxlxRl10Ivb",
	"zBHB4oiHcaqnKcfBP4+HkoVGUjSKAt+j0uehfTvm4agChyrzf8HmiUv+Zw/0ap9A7RMchoy9KqvRs0zS",
	"r7F9khhpok2ZxZ7wI8yDuOT92mb3wR/vn2hI/gL9BpKnkByCfoOVnHamzskhq/ZjyXxicDGsrtVl1bFA",
	"HRzvf3e81zl6/PbD021QryHZh2QF9DPDtg3JGsmRKqNlJkz+3zA5eZ3zBZ/h22mffrkk+QILLVB7FjU9",
	"SBdgRVsTE93vD7vtVVAtUG0r9WGBaoN6BOrAunZzBtPp/tgBddi99w+oX0DtHu+96B5sgfoJ9AboddAa",
	"1AGoXWO3D+oHWFGnGOiHR682jh6/7L7bQK+2R4NgjnoLFnJTB0hPt0HvmU6uYVdVazTIip6YIMNF7jVj",
	"iOJV1sjn8/kvhllepXNe2azekDL6OgwaJEdkI0K7WAo/rGAjmjlSOLfyR87esYIZxl6MVkaKhg/Jc0g6",
	"xHApnJPLWefqWFKZRhfFbguSDujXoDaOd9ZBPQO1DvoBqHegfgP9CGlePnfLzpxiY3lmW10QUf0KiSab",
	"hm6/h33fJu2+A+yU4BET0k8J4amP//Nc1KjEvRDK6amBxDH1ChNYrd44QPSo/nEI3Kn7gpWJeyv1OcDP",
	"9p3xudvMkykLP5znxpUvzR7kEQsnaeRPxhHzcDoxEacML+UdDI8AGvnEJdN5J+8QnOWyakjYtC6rdsAr",
	"vmlYxNMNNaqIF6D/NmfgYffeztHmKuiHx39ugFolxrswbZ8pE5d8ZVxlj7asRvVxNoIGI2Q8FkGDg2M8",
	"tpD67W3Mz2ELQ+oej0WQEQvz6sKXDeLems0N3RuGq4aqoJUYW4wFJ7NoaFcZDWQVI1WYKfvpUl6vMm/h",
	"hsE0/quoqeivkLTMoatA70KSgG6neyI9HrDAy6QuAuKSqpSRa9sB92hQ5bF0rzhXHHvxEmnO9psxKvR0",
	"ckLyFvQ26BboHbzaJGugWh9+3gb1xIzcPbN4Hy8+prnpnSCkNdyMpr3N3CdbSN0FtYXzVLVA6+7L33G8",
	"4sS+m+nwY2ctk60xef6xc38QsebHniG1NBlLHgV+pWrE5KOGlno/0mz+GwAA//+VjDuIzAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
